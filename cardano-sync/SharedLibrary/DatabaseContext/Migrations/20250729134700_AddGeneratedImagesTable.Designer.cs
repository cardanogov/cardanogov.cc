// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharedLibrary.DatabaseContext;

#nullable disable

namespace SharedLibrary.DatabaseContext.Migrations
{
    [DbContext(typeof(CardanoDbContext))]
    [Migration("20250729134700_AddGeneratedImagesTable")]
    partial class AddGeneratedImagesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedLibrary.Models.ApiKey", b =>
                {
                    b.Property<string>("AllowedEndpoints")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AllowedOrigins")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DailyRequests")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastDailyReset")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalRequests")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ToTable("api_key", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.GeneratedImage", b =>
                {
                    b.Property<string>("CacheKey")
                        .HasColumnType("text")
                        .HasColumnName("cache_key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("image_url");

                    b.Property<string>("Subtext")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subtext");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("generated_image", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDAccountInformation", b =>
                {
                    b.Property<string>("delegated_drep")
                        .HasColumnType("jsonb");

                    b.Property<string>("delegated_pool")
                        .HasColumnType("jsonb");

                    b.Property<string>("deposit")
                        .HasColumnType("text");

                    b.Property<string>("proposal_refund")
                        .HasColumnType("text");

                    b.Property<string>("reserves")
                        .HasColumnType("text");

                    b.Property<string>("rewards")
                        .HasColumnType("text");

                    b.Property<string>("rewards_available")
                        .HasColumnType("text");

                    b.Property<string>("stake_address")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<string>("total_balance")
                        .HasColumnType("text");

                    b.Property<string>("treasury")
                        .HasColumnType("text");

                    b.Property<string>("utxo")
                        .HasColumnType("text");

                    b.Property<string>("withdrawals")
                        .HasColumnType("text");

                    b.ToTable("md_account_information", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDAccountList", b =>
                {
                    b.Property<string>("script_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("stake_address")
                        .HasColumnType("text");

                    b.Property<string>("stake_address_hex")
                        .HasColumnType("text");

                    b.ToTable("md_account_list", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDAccountUpdates", b =>
                {
                    b.Property<long?>("absolute_slot")
                        .HasColumnType("bigint");

                    b.Property<string>("action_type")
                        .HasColumnType("text");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<int?>("epoch_slot")
                        .HasColumnType("integer");

                    b.Property<string>("stake_address")
                        .HasColumnType("text");

                    b.Property<string>("tx_hash")
                        .HasColumnType("text");

                    b.ToTable("md_account_updates", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDCommitteeInformation", b =>
                {
                    b.Property<string>("members")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<int?>("quorum_denominator")
                        .HasColumnType("integer");

                    b.Property<int?>("quorum_numerator")
                        .HasColumnType("integer");

                    b.ToTable("md_committee_information", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDCommitteeVotes", b =>
                {
                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("cc_hot_id")
                        .HasColumnType("text");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("vote")
                        .HasColumnType("text");

                    b.Property<string>("vote_tx_hash")
                        .HasColumnType("text");

                    b.ToTable("md_committee_votes", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDreps", b =>
                {
                    b.Property<string>("bech32")
                        .HasColumnType("text");

                    b.Property<string>("bech32_legacy")
                        .HasColumnType("text");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int?>("delegator")
                        .HasColumnType("integer");

                    b.Property<string>("given_name")
                        .HasColumnType("text");

                    b.Property<bool?>("has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("hash")
                        .HasColumnType("text");

                    b.Property<int?>("last_active_epoch")
                        .HasColumnType("integer");

                    b.Property<string>("live_stake")
                        .HasColumnType("text");

                    b.Property<string>("motivations")
                        .HasColumnType("text");

                    b.Property<string>("objectives")
                        .HasColumnType("text");

                    b.Property<string>("payment_address")
                        .HasColumnType("text");

                    b.Property<string>("qualifications")
                        .HasColumnType("text");

                    b.Property<string>("tx_hash")
                        .HasColumnType("text");

                    b.Property<long?>("tx_time")
                        .HasColumnType("bigint");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.ToTable("md_dreps", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsDelegators", b =>
                {
                    b.Property<string>("amount")
                        .HasColumnType("text");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("script_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("stake_address")
                        .HasColumnType("text");

                    b.Property<string>("stake_address_hex")
                        .HasColumnType("text");

                    b.ToTable("md_dreps_delegators", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsEpochSummary", b =>
                {
                    b.Property<string>("amount")
                        .HasColumnType("text");

                    b.Property<int?>("dreps")
                        .HasColumnType("integer");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.ToTable("md_dreps_epoch_summary", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsInfo", b =>
                {
                    b.Property<bool?>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("amount")
                        .HasColumnType("text");

                    b.Property<string>("deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<string>("expires_epoch_no")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("hex")
                        .HasColumnType("text");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("registered")
                        .HasColumnType("boolean");

                    b.ToTable("md_dreps_info", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsList", b =>
                {
                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<bool?>("has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("hex")
                        .HasColumnType("text");

                    b.Property<bool?>("registered")
                        .HasColumnType("boolean");

                    b.ToTable("md_dreps_list", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsMetadata", b =>
                {
                    b.Property<string>("bytes")
                        .HasColumnType("jsonb");

                    b.Property<string>("comment")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<bool?>("has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("hex")
                        .HasColumnType("text");

                    b.Property<string>("is_valid")
                        .HasColumnType("jsonb");

                    b.Property<string>("language")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("warning")
                        .HasColumnType("jsonb");

                    b.ToTable("md_dreps_metadata", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsUpdates", b =>
                {
                    b.Property<string>("action")
                        .HasColumnType("text");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("cert_index")
                        .HasColumnType("integer");

                    b.Property<string>("deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<bool?>("has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("hex")
                        .HasColumnType("text");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("update_tx_hash")
                        .HasColumnType("text");

                    b.ToTable("md_dreps_updates", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsVotes", b =>
                {
                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("vote")
                        .HasColumnType("text");

                    b.Property<string>("vote_tx_hash")
                        .HasColumnType("text");

                    b.ToTable("md_dreps_votes", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDDrepsVotingPowerHistory", b =>
                {
                    b.Property<string>("amount")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_id")
                        .HasColumnType("text");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.ToTable("md_dreps_voting_power_history", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDEpoch", b =>
                {
                    b.Property<string>("active_stake")
                        .HasColumnType("jsonb");

                    b.Property<string>("avg_blk_reward")
                        .HasColumnType("jsonb");

                    b.Property<int?>("blk_count")
                        .HasColumnType("integer");

                    b.Property<long?>("end_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("fees")
                        .HasColumnType("text");

                    b.Property<long?>("first_block_time")
                        .HasColumnType("bigint");

                    b.Property<long?>("last_block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("out_sum")
                        .HasColumnType("text");

                    b.Property<long?>("start_time")
                        .HasColumnType("bigint");

                    b.Property<string>("total_rewards")
                        .HasColumnType("jsonb");

                    b.Property<int?>("tx_count")
                        .HasColumnType("integer");

                    b.ToTable("md_epoch", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDEpochProtocolParameters", b =>
                {
                    b.Property<string>("block_hash")
                        .HasColumnType("text");

                    b.Property<string>("coins_per_utxo_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("collateral_percent")
                        .HasColumnType("jsonb");

                    b.Property<string>("committee_max_term_length")
                        .HasColumnType("jsonb");

                    b.Property<string>("committee_min_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("cost_models")
                        .HasColumnType("jsonb");

                    b.Property<string>("decentralisation")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_activity")
                        .HasColumnType("jsonb");

                    b.Property<string>("drep_deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_committee_no_confidence")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_committee_normal")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_hard_fork_initiation")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_motion_no_confidence")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_p_p_economic_group")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_p_p_gov_group")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_p_p_network_group")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_p_p_technical_group")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_treasury_withdrawal")
                        .HasColumnType("jsonb");

                    b.Property<string>("dvt_update_to_constitution")
                        .HasColumnType("jsonb");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("extra_entropy")
                        .HasColumnType("jsonb");

                    b.Property<string>("gov_action_deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("gov_action_lifetime")
                        .HasColumnType("jsonb");

                    b.Property<string>("influence")
                        .HasColumnType("jsonb");

                    b.Property<string>("key_deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_bh_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_block_ex_mem")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_block_ex_steps")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_block_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_collateral_inputs")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_tx_ex_mem")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_tx_ex_steps")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_tx_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("max_val_size")
                        .HasColumnType("jsonb");

                    b.Property<string>("min_fee_a")
                        .HasColumnType("jsonb");

                    b.Property<string>("min_fee_b")
                        .HasColumnType("jsonb");

                    b.Property<string>("min_fee_ref_script_cost_per_byte")
                        .HasColumnType("jsonb");

                    b.Property<string>("min_pool_cost")
                        .HasColumnType("jsonb");

                    b.Property<string>("min_utxo_value")
                        .HasColumnType("jsonb");

                    b.Property<string>("monetary_expand_rate")
                        .HasColumnType("jsonb");

                    b.Property<string>("nonce")
                        .HasColumnType("jsonb");

                    b.Property<string>("optimal_pool_count")
                        .HasColumnType("jsonb");

                    b.Property<string>("pool_deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("price_mem")
                        .HasColumnType("jsonb");

                    b.Property<string>("price_step")
                        .HasColumnType("jsonb");

                    b.Property<string>("protocol_major")
                        .HasColumnType("jsonb");

                    b.Property<string>("protocol_minor")
                        .HasColumnType("jsonb");

                    b.Property<string>("pvt_committee_no_confidence")
                        .HasColumnType("jsonb");

                    b.Property<string>("pvt_committee_normal")
                        .HasColumnType("jsonb");

                    b.Property<string>("pvt_hard_fork_initiation")
                        .HasColumnType("jsonb");

                    b.Property<string>("pvt_motion_no_confidence")
                        .HasColumnType("jsonb");

                    b.Property<string>("pvtpp_security_group")
                        .HasColumnType("jsonb");

                    b.Property<string>("treasury_growth_rate")
                        .HasColumnType("jsonb");

                    b.ToTable("md_epoch_protocol_parameters", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDEpochs", b =>
                {
                    b.Property<int?>("account")
                        .HasColumnType("integer");

                    b.Property<int?>("account_with_amount")
                        .HasColumnType("integer");

                    b.Property<int?>("account_with_reward")
                        .HasColumnType("integer");

                    b.Property<int?>("block")
                        .HasColumnType("integer");

                    b.Property<int?>("block_with_tx")
                        .HasColumnType("integer");

                    b.Property<int?>("byron")
                        .HasColumnType("integer");

                    b.Property<string>("byron_amount")
                        .HasColumnType("text");

                    b.Property<int?>("byron_with_amount")
                        .HasColumnType("integer");

                    b.Property<string>("circulating_supply")
                        .HasColumnType("text");

                    b.Property<double?>("decentralisation")
                        .HasColumnType("double precision");

                    b.Property<int?>("delegator")
                        .HasColumnType("integer");

                    b.Property<int?>("delegator_with_stake")
                        .HasColumnType("integer");

                    b.Property<long?>("end_time")
                        .HasColumnType("bigint");

                    b.Property<double?>("exchange_rate")
                        .HasColumnType("double precision");

                    b.Property<string>("fees")
                        .HasColumnType("text");

                    b.Property<string>("holder_range")
                        .HasColumnType("jsonb");

                    b.Property<int?>("no")
                        .HasColumnType("integer");

                    b.Property<string>("nonce")
                        .HasColumnType("text");

                    b.Property<int?>("optimal_pool_count")
                        .HasColumnType("integer");

                    b.Property<string>("orphaned_reward_amount")
                        .HasColumnType("text");

                    b.Property<string>("out_sum")
                        .HasColumnType("text");

                    b.Property<int?>("pool")
                        .HasColumnType("integer");

                    b.Property<string>("pool_fee")
                        .HasColumnType("text");

                    b.Property<int?>("pool_register")
                        .HasColumnType("integer");

                    b.Property<int?>("pool_retire")
                        .HasColumnType("integer");

                    b.Property<int?>("pool_with_block")
                        .HasColumnType("integer");

                    b.Property<int?>("pool_with_stake")
                        .HasColumnType("integer");

                    b.Property<string>("reward_amount")
                        .HasColumnType("text");

                    b.Property<string>("stake")
                        .HasColumnType("text");

                    b.Property<long?>("start_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("token")
                        .HasColumnType("integer");

                    b.Property<int?>("token_holder")
                        .HasColumnType("integer");

                    b.Property<int?>("token_policy")
                        .HasColumnType("integer");

                    b.Property<int?>("token_tx")
                        .HasColumnType("integer");

                    b.Property<int?>("tx")
                        .HasColumnType("integer");

                    b.Property<string>("tx_amount")
                        .HasColumnType("text");

                    b.ToTable("md_epochs", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolDelegators", b =>
                {
                    b.Property<int?>("active_epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("amount")
                        .HasColumnType("text");

                    b.Property<string>("latest_delegation_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_bech32")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("stake_address")
                        .HasColumnType("text");

                    b.ToTable("md_pool_delegators", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolInformation", b =>
                {
                    b.Property<int?>("active_epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("active_stake")
                        .HasColumnType("text");

                    b.Property<int?>("block_count")
                        .HasColumnType("integer");

                    b.Property<string>("deposit")
                        .HasColumnType("text");

                    b.Property<string>("fixed_cost")
                        .HasColumnType("text");

                    b.Property<int?>("live_delegators")
                        .HasColumnType("integer");

                    b.Property<string>("live_pledge")
                        .HasColumnType("text");

                    b.Property<double?>("live_saturation")
                        .HasColumnType("double precision");

                    b.Property<string>("live_stake")
                        .HasColumnType("text");

                    b.Property<double?>("margin")
                        .HasColumnType("double precision");

                    b.Property<string>("meta_hash")
                        .HasColumnType("text");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("text");

                    b.Property<string>("op_cert")
                        .HasColumnType("text");

                    b.Property<int?>("op_cert_counter")
                        .HasColumnType("integer");

                    b.Property<string>("owners")
                        .HasColumnType("jsonb");

                    b.Property<string>("pledge")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_bech32")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_hex")
                        .HasColumnType("text");

                    b.Property<string>("pool_status")
                        .HasColumnType("text");

                    b.Property<string>("relays")
                        .HasColumnType("jsonb");

                    b.Property<int?>("retiring_epoch")
                        .HasColumnType("integer");

                    b.Property<string>("reward_addr")
                        .HasColumnType("text");

                    b.Property<string>("reward_addr_delegated_drep")
                        .HasColumnType("text");

                    b.Property<double?>("sigma")
                        .HasColumnType("double precision");

                    b.Property<string>("voting_power")
                        .HasColumnType("text");

                    b.Property<string>("vrf_key_hash")
                        .HasColumnType("text");

                    b.ToTable("md_pool_information", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolList", b =>
                {
                    b.Property<string>("active_epoch_no")
                        .HasColumnType("text");

                    b.Property<string>("active_stake")
                        .HasColumnType("text");

                    b.Property<string>("deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("fixed_cost")
                        .HasColumnType("jsonb");

                    b.Property<string>("margin")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("owners")
                        .HasColumnType("jsonb");

                    b.Property<string>("pledge")
                        .HasColumnType("jsonb");

                    b.Property<string>("pool_group")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_bech32")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_hex")
                        .HasColumnType("text");

                    b.Property<string>("pool_status")
                        .HasColumnType("text");

                    b.Property<string>("relays")
                        .HasColumnType("jsonb");

                    b.Property<string>("retiring_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("reward_addr")
                        .HasColumnType("jsonb");

                    b.Property<string>("ticker")
                        .HasColumnType("text");

                    b.ToTable("md_pool_list", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolMetadata", b =>
                {
                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("pool_id_bech32")
                        .HasColumnType("text");

                    b.ToTable("md_pool_metadata", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolStakeSnapshot", b =>
                {
                    b.Property<string>("active_stake")
                        .HasColumnType("text");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("nonce")
                        .HasColumnType("jsonb");

                    b.Property<string>("pool_id_bech32")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pool_stake")
                        .HasColumnType("text");

                    b.Property<string>("snapshot")
                        .HasColumnType("text");

                    b.ToTable("md_pool_stake_snapshot", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolUpdates", b =>
                {
                    b.Property<string>("active_epoch_no")
                        .HasColumnType("text");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("fixed_cost")
                        .HasColumnType("text");

                    b.Property<string>("margin")
                        .HasColumnType("text");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("text");

                    b.Property<string>("owners")
                        .HasColumnType("jsonb");

                    b.Property<string>("pledge")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_bech32")
                        .HasColumnType("text");

                    b.Property<string>("pool_id_hex")
                        .HasColumnType("text");

                    b.Property<string>("relays")
                        .HasColumnType("jsonb");

                    b.Property<string>("retiring_epoch")
                        .HasColumnType("text");

                    b.Property<string>("reward_addr")
                        .HasColumnType("text");

                    b.Property<string>("tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("update_type")
                        .HasColumnType("text");

                    b.Property<string>("vrf_key_hash")
                        .HasColumnType("text");

                    b.ToTable("md_pool_updates", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDPoolsVotingPowerHistory", b =>
                {
                    b.Property<string>("amount")
                        .HasColumnType("jsonb");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("pool_id_bech32")
                        .HasColumnType("text");

                    b.ToTable("md_pools_voting_power_history", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDProposalVotes", b =>
                {
                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<string>("vote")
                        .HasColumnType("text");

                    b.Property<bool?>("voter_has_script")
                        .HasColumnType("boolean");

                    b.Property<string>("voter_hex")
                        .HasColumnType("text");

                    b.Property<string>("voter_id")
                        .HasColumnType("text");

                    b.Property<string>("voter_role")
                        .HasColumnType("text");

                    b.ToTable("md_proposal_votes", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDProposalVotingSummary", b =>
                {
                    b.Property<int?>("committee_abstain_votes_cast")
                        .HasColumnType("integer");

                    b.Property<double?>("committee_no_pct")
                        .HasColumnType("double precision");

                    b.Property<int?>("committee_no_votes_cast")
                        .HasColumnType("integer");

                    b.Property<double?>("committee_yes_pct")
                        .HasColumnType("double precision");

                    b.Property<int?>("committee_yes_votes_cast")
                        .HasColumnType("integer");

                    b.Property<int?>("drep_abstain_votes_cast")
                        .HasColumnType("integer");

                    b.Property<string>("drep_active_abstain_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("drep_active_no_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("drep_active_yes_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("drep_always_abstain_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("drep_always_no_confidence_vote_power")
                        .HasColumnType("text");

                    b.Property<double?>("drep_no_pct")
                        .HasColumnType("double precision");

                    b.Property<string>("drep_no_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("drep_no_votes_cast")
                        .HasColumnType("integer");

                    b.Property<double?>("drep_yes_pct")
                        .HasColumnType("double precision");

                    b.Property<string>("drep_yes_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("drep_yes_votes_cast")
                        .HasColumnType("integer");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<int?>("pool_abstain_votes_cast")
                        .HasColumnType("integer");

                    b.Property<string>("pool_active_abstain_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("pool_active_no_vote_power")
                        .HasColumnType("text");

                    b.Property<string>("pool_active_yes_vote_power")
                        .HasColumnType("text");

                    b.Property<double?>("pool_no_pct")
                        .HasColumnType("double precision");

                    b.Property<string>("pool_no_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("pool_no_votes_cast")
                        .HasColumnType("integer");

                    b.Property<string>("pool_passive_always_abstain_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("pool_passive_always_abstain_votes_assigned")
                        .HasColumnType("integer");

                    b.Property<string>("pool_passive_always_no_confidence_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("pool_passive_always_no_confidence_votes_assigned")
                        .HasColumnType("integer");

                    b.Property<double?>("pool_yes_pct")
                        .HasColumnType("double precision");

                    b.Property<string>("pool_yes_vote_power")
                        .HasColumnType("text");

                    b.Property<int?>("pool_yes_votes_cast")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<string>("proposal_type")
                        .HasColumnType("text");

                    b.ToTable("md_proposal_voting_summary", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDProposalsList", b =>
                {
                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("dropped_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("enacted_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("expiration")
                        .HasColumnType("jsonb");

                    b.Property<string>("expired_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_comment")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_is_valid")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_language")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("param_proposal")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_description")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("proposal_type")
                        .HasColumnType("text");

                    b.Property<int?>("proposed_epoch")
                        .HasColumnType("integer");

                    b.Property<string>("ratified_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("return_address")
                        .HasColumnType("text");

                    b.Property<string>("withdrawal")
                        .HasColumnType("jsonb");

                    b.ToTable("md_proposals_list", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDQueryChainTip", b =>
                {
                    b.Property<int?>("abs_slot")
                        .HasColumnType("integer");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<int?>("epoch_slot")
                        .HasColumnType("integer");

                    b.Property<string>("hash")
                        .HasColumnType("text");

                    b.ToTable("md_query_chain_tip", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDTotals", b =>
                {
                    b.Property<string>("circulation")
                        .HasColumnType("text");

                    b.Property<string>("deposits_drep")
                        .HasColumnType("text");

                    b.Property<string>("deposits_proposal")
                        .HasColumnType("text");

                    b.Property<string>("deposits_stake")
                        .HasColumnType("text");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("fees")
                        .HasColumnType("text");

                    b.Property<string>("reserves")
                        .HasColumnType("text");

                    b.Property<string>("reward")
                        .HasColumnType("text");

                    b.Property<string>("supply")
                        .HasColumnType("text");

                    b.Property<string>("treasury")
                        .HasColumnType("text");

                    b.ToTable("md_totals", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDTreasuryWithdrawals", b =>
                {
                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<long?>("sum")
                        .HasColumnType("bigint");

                    b.ToTable("md_treasury_withdrawals", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDUSD", b =>
                {
                    b.Property<string>("cardano")
                        .HasColumnType("jsonb");

                    b.ToTable("md_usd", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDUtxoInfo", b =>
                {
                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("asset_list")
                        .HasColumnType("jsonb");

                    b.Property<int?>("block_height")
                        .HasColumnType("integer");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("datum_hash")
                        .HasColumnType("jsonb");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("inline_datum")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("is_spent")
                        .HasColumnType("boolean");

                    b.Property<string>("payment_cred")
                        .HasColumnType("jsonb");

                    b.Property<string>("reference_script")
                        .HasColumnType("jsonb");

                    b.Property<string>("stake_address")
                        .HasColumnType("jsonb");

                    b.Property<string>("tx_hash")
                        .HasColumnType("text");

                    b.Property<int?>("tx_index")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.ToTable("md_utxo_info", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDVoteList", b =>
                {
                    b.Property<int?>("block_height")
                        .HasColumnType("integer");

                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("epoch_no")
                        .HasColumnType("integer");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("proposal_type")
                        .HasColumnType("text");

                    b.Property<string>("vote")
                        .HasColumnType("text");

                    b.Property<string>("vote_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("voter_id")
                        .HasColumnType("text");

                    b.Property<string>("voter_role")
                        .HasColumnType("text");

                    b.ToTable("md_vote_list", (string)null);
                });

            modelBuilder.Entity("SharedLibrary.Models.MDVotersProposalList", b =>
                {
                    b.Property<long?>("block_time")
                        .HasColumnType("bigint");

                    b.Property<string>("deposit")
                        .HasColumnType("jsonb");

                    b.Property<string>("dropped_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("enacted_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("expiration")
                        .HasColumnType("jsonb");

                    b.Property<string>("expired_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_comment")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_hash")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_is_valid")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_json")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_language")
                        .HasColumnType("jsonb");

                    b.Property<string>("meta_url")
                        .HasColumnType("jsonb");

                    b.Property<string>("param_proposal")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_description")
                        .HasColumnType("jsonb");

                    b.Property<string>("proposal_id")
                        .HasColumnType("text");

                    b.Property<int?>("proposal_index")
                        .HasColumnType("integer");

                    b.Property<string>("proposal_tx_hash")
                        .HasColumnType("text");

                    b.Property<string>("proposal_type")
                        .HasColumnType("text");

                    b.Property<int?>("proposed_epoch")
                        .HasColumnType("integer");

                    b.Property<string>("ratified_epoch")
                        .HasColumnType("jsonb");

                    b.Property<string>("return_address")
                        .HasColumnType("text");

                    b.Property<string>("withdrawal")
                        .HasColumnType("jsonb");

                    b.ToTable("md_voters_proposal_list", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
